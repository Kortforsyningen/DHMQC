--
-- This set of SQL commands will create a PostGIS database and the necessary 
-- views for the quality control scripts included with dhmqc. 
-- 

-- *****************************************************************
-- STEP 1: CREATE AN EMPTY DATABASE, ENABLE POSTGIS
-- *****************************************************************

-- If there already is a database, drop it: 
-- DROP DATABASE dhmqc;

CREATE DATABASE dhmqc
  WITH OWNER = postgres
       ENCODING = 'UTF8'
       TABLESPACE = pg_default
       LC_COLLATE = 'Danish_Denmark.1252'
       LC_CTYPE = 'Danish_Denmark.1252'
       CONNECTION LIMIT = -1;

create extension postgis;	   

CREATE SCHEMA dhmqc
  AUTHORIZATION postgres;


-- *****************************************************************
-- STEP 2: READ THE INCLUDED 1KM TILE DEFINITIONS FROM FILE
-- *****************************************************************

-- open a prompt (ie. OSGeo4W) and use the following command: 
-- ogr2ogr -f "PostgreSQL" PG:"host=<HOST> user=postgres dbname=dhmqc password=<PASSWORD>" c:\dev\dhmqc\demo\1km\1km_Tiles.shp -nln dhmqc.f_dk1km -skipfailures -overwrite -a_srs EPSG:25832 -s_srs EPSG:25832


-- *****************************************************************
-- STEP 3: CREATE TABLES AND VIEWS TO STORE AND PRESENT THE RESULTS
-- *****************************************************************

-- If the tables and views already exists: 
--drop table dhmqc.f_zcheck_roads cascade;
--drop table dhmqc.f_zcheck_buildings cascade;
--drop table dhmqc.f_classicheck cascade;
-- ((drop table dhmqc.f_dk1km cascade));
-- drop view dhmqc.v_tile_precision_roads;
-- drop view dhmqc.v_tile_precision_buildings;

CREATE TABLE dhmqc.f_zcheck_roads 
( ogc_fid serial NOT NULL,
  km_name character varying(15),
  id1 integer,
  id2 integer,
  mean12 real,
  mean21 real,
  sigma12 real,
  sigma21 real,
  npoints12 integer,
  npoints21 integer,
  combined_precision real,
  CONSTRAINT zcheck_roads_pkey PRIMARY KEY (ogc_fid))
  with (OIDS=FALSE); 
ALTER TABLE dhmqc.f_zcheck_roads
  OWNER TO postgres;  

SELECT AddGeometryColumn('dhmqc','f_zcheck_roads','wkb_geometry',25832, 'LINESTRING', 2);  

CREATE INDEX zcheck_roads_geom_idx
  ON dhmqc.f_zcheck_roads
  USING gist
  (wkb_geometry);


  
CREATE TABLE dhmqc.f_zcheck_buildings 
( ogc_fid serial NOT NULL,
  km_name character varying(15),
  id1 integer,
  id2 integer,
  mean12 real,
  mean21 real,
  sigma12 real,
  sigma21 real,
  npoints12 integer,
  npoints21 integer, 
  combined_precision real,  
  CONSTRAINT zcheck_buildings_pkey PRIMARY KEY (ogc_fid))
  with (OIDS=FALSE); 
ALTER TABLE dhmqc.f_zcheck_buildings
  OWNER TO postgres;  
  
SELECT AddGeometryColumn('dhmqc','f_zcheck_buildings','wkb_geometry',25832, 'POLYGON', 2);
  
  
CREATE INDEX zcheck_buildings_geom_idx
  ON dhmqc.f_zcheck_buildings
  USING gist
  (wkb_geometry);

CREATE TABLE dhmqc.f_classicheck 
( ogc_fid serial NOT NULL,
  km_name character varying(15),
  c_class integer,
  c_frequency real,
  npoints integer,
  CONSTRAINT classicheck_pkey PRIMARY KEY (ogc_fid))
  with (OIDS=FALSE); 
ALTER TABLE dhmqc.f_classicheck
  OWNER TO postgres;  

SELECT AddGeometryColumn('dhmqc','f_classicheck','wkb_geometry',25832, 'POLYGON', 2);
  
CREATE INDEX classicheck_geom_idx
  ON dhmqc.f_classicheck
  USING gist
  (wkb_geometry);
  
CREATE TABLE dhmqc.f_classes_in_tiles 
( ogc_fid serial NOT NULL,
  km_name character varying(15),
  n_created_00 integer,
  n_surface_1 integer,
  n_terrain_2 integer,
  n_low_veg_3 integer,
  n_med_veg_4 integer,
  n_high_veg_5 integer,
  n_building_6 integer,
  n_outliers_7 integer,
  n_mod_key_8 integer,
  n_water_9 integer,
  n_ignored_10 integer,
  n_bridge_17 integer,
  n_man_excl_32 integer,
  n_points_total integer,
  CONSTRAINT classes_in_tiles_pkey PRIMARY KEY (ogc_fid))
  with (OIDS=FALSE); 
ALTER TABLE dhmqc.f_classes_in_tiles
  OWNER TO postgres;  

SELECT AddGeometryColumn('dhmqc','f_classes_in_tiles','wkb_geometry',25832, 'POLYGON', 2);
  
CREATE INDEX classes_in_tiles_geom_idx
  ON dhmqc.f_classes_in_tiles
  USING gist
  (wkb_geometry);
  


  
 
  
  
CREATE OR REPLACE VIEW dhmqc.v_tile_precision_roads AS 
 SELECT km.ogc_fid, km.wkb_geometry, 
    km.kn1kmdk AS tilename, 
    avg(abs(zc.mean12)) AS abs_avg12,
    avg(abs(zc.mean21)) AS abs_avg21,
    avg(sigma12) as sigma12,
    avg(sigma21) as sigma21
   FROM dhmqc.f_zcheck_roads zc, 
    dhmqc.f_dk1km km
  WHERE km.kn1kmdk = zc.km_name
  GROUP BY km.ogc_fid, km.kn1kmdk, km.wkb_geometry;
  
ALTER VIEW dhmqc.v_tile_precision_roads
  OWNER TO postgres;
  
CREATE OR REPLACE VIEW dhmqc.v_tile_precision_buildings AS 
 SELECT km.ogc_fid, km.wkb_geometry, 
    km.kn1kmdk AS tilename, 
    avg(abs(zc.mean12)) AS abs_avg12,
    avg(abs(zc.mean21)) AS abs_avg21,
    avg(sigma12) as sigma12,
    avg(sigma21) as sigma21
   FROM dhmqc.f_zcheck_buildings zc, 
    dhmqc.f_dk1km km
  WHERE km.kn1kmdk = zc.km_name
  GROUP BY km.ogc_fid, km.kn1kmdk, km.wkb_geometry;
  
ALTER VIEW dhmqc.v_tile_precision_buildings
  OWNER TO postgres;  
  

create or replace view dhmqc.v_class_distribution as select 
  ogc_fid, 
  km_name, 
  round(100*n_created_00/n_points_total) as pct_created_00,
  round(100*n_surface_1/n_points_total) as pct_surface_1,
  round(100*n_terrain_2/n_points_total) as pct_terrain_2,
  round(100*n_low_veg_3/n_points_total) as pct_low_veg_3, 
  round(100*n_med_veg_4/n_points_total) as pct_med_veg_4,
  round(100*n_high_veg_5/n_points_total) as pct_high_veg_5,
  round(100*n_building_6/n_points_total) as pct_building_6,
  round(100*n_outliers_7/n_points_total) as pct_outliers_7,
  round(100*n_mod_key_8/n_points_total) as pct_mod_key_8,
  round(100*n_water_9/n_points_total) as pct_water_9,
  round(100*n_ignored_10/n_points_total) as pct_ignored_10,
  round(100*n_bridge_17/n_points_total) as pct_bridge_17,
  round(100*n_man_excl_32/n_points_total) as pct_man_excl_32,
  n_points_total,
  wkb_geometry 
from dhmqc.f_classes_in_tiles
where n_points_total >0;

ALTER VIEW dhmqc.v_class_distribution
  OWNER TO postgres;  
